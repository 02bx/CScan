using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraBars;
using System.IO;
using System.Text.RegularExpressions;
using DevExpress.XtraEditors;
using System.Collections;
using System.Net;
using System.Xml;
using System.IO.Compression;
using HtmlAgilityPack;
using System.Threading;
//做从xml遍历url，进行测试
namespace WindowsFormsApplication1
{
    public partial class Main : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        public Main()
        {
            InitializeComponent();

            // This line of code is generated by Data Source Configuration Wizard
            // Create a new DataSet
            //System.Data.DataSet xmlDataSet = new System.Data.DataSet("XML DataSet");
            // Load the XML document to the DataSet
            //xmlDataSet.ReadXml(@"F:\毕设\资料\WindowsFormsApplication1\WindowsFormsApplication1\bin\Debug\www.xml");
            // This line of code is generated by Data Source Configuration Wizard
            //treeList1.DataSource = xmlDataSet.Tables["root"];
            //
        }
       // Common com = new Common();
        delegate void AsynUpdateUI();
        List<string> list = new List<string>();
        List<string> listallurl = new List<string>();
        List<string> wplayload = new List<string>();
        string Playpath = "";
        string rePlaypath = "";
        string dd = "";
        string dd1 = "";
        int value = 0;
        string filepath = System.Environment.CurrentDirectory+"\\www.xml";
        public static int parentId;
        public static int Id;
        private void Main_Load(object sender, EventArgs e)
        {
            barStaticItem1.Caption = System.Environment.UserName+" ：欢迎您使用本系统";
            addtreelist();
        }

      
        /// <summary>
        /// 获得url
        /// </summary>
        private List<string> Geturl() {
            string url = GetHttpWebRequest(textEdit1.Text.Trim());
           return list = GetHyperLinks(url, textEdit1.Text.Trim());
        }
       
        private void simpleButton1_Click(object sender, EventArgs e)
        {
            
            if (Common.playload.Count==0)
            {
                Common.loadpoc();
            }
            if (Common.replayload.Count == 0)
            {
                Common.loadpoc();
            }
           
           // Loading();
            Common.url = textEdit1.Text.Trim().ToString();
            Common.Weburllistzx.Add(Common.url);
           
            if (radioButton2.Checked == true)
            {
                Common.cookie = Cookieedit.Text.Trim().ToString();
            }
            MatchCollection mc = Regex.Matches(Common.url, @"(?i)^https?://(?:\w+\.)*?(\w*\.(?:com\.cn|cn|com|net))[\\\/]*");
           // MatchCollection mc1 = Regex.Matches(Common.url, @"http\:\/\/xss(.+)?\.([a-z-]+\.com)(\:[\S\s]+)", RegexOptions.CultureInvariant);
            foreach (var item in mc)
            {
                Common.Dominant = item.ToString();
            }
            Common.Dominant = GetTopDomainName(Common.Dominant);
            Scan scan = Scan.Getinstance();
            scan.Show();
            scan.Focus();
            //Task task = new Task(n => Getallurl(), 0);
            //task.Start();
            //Task tsk = task.ContinueWith(t => addtreelist());
            //LoadingCompleted();
        }
        #region loading 加载
        private void Loading()
        {
            splashScreenManager1.ShowWaitForm();
            Thread.Sleep(2000);
           
            //加载资源
        }
        /// <summary>
        /// 加载完成
        /// </summary>
        private void LoadingCompleted()
        {
            splashScreenManager1.CloseWaitForm();
        }
        #endregion
        #region 添加到treelist
        //private void addtreelist()
        //{
        //    DataTable dt = new DataTable();
        //    DataColumn did = new DataColumn("ID", Type.GetType("System.Int32"));
        //    DataColumn dParentID = new DataColumn("ParentID", Type.GetType("System.Int32"));
        //    DataColumn dNodeName = new DataColumn("节点名称", Type.GetType("System.String"));
        //    dt.Columns.Add(did);
        //    dt.Columns.Add(dParentID);
        //    dt.Columns.Add(dNodeName);
        //    XmlDocument xmlDoc = new XmlDocument();
        //    xmlDoc.Load(filepath);
        //    int Id = 1;
        //    int ParentId = 0;
        //    //获取根节点
        //    XmlElement xmlRootElement = xmlDoc.DocumentElement;
        //    DataRow dr = dt.NewRow();
        //    dr["ID"] = Id++;
        //    dr["ParentID"] = 0;
        //    dr["节点名称"] = xmlRootElement.Attributes["url"].Value;

        //    dt.Rows.Add(dr);
        //    XmlNodeList xmlNodeList = xmlRootElement.ChildNodes;
        //    foreach (XmlElement xmlElement in xmlNodeList)
        //    {
        //        dr = dt.NewRow();
        //        dr["ID"] = Id++;
        //        dr["ParentID"] = ParentId;
        //        dr["节点名称"] = xmlElement.Attributes["DateTime"].Value;
        //        dt.Rows.Add(dr);
        //        int parentId = Id - 1;
        //        //遍历该节点下面的子节点
        //        XmlNodeList ChildNodeList = xmlElement.ChildNodes;
        //        foreach (XmlNode xmlNode in ChildNodeList)
        //        {
        //            dr = dt.NewRow();
        //            dr["ID"] = Id++;
        //            dr["ParentID"] = parentId;
        //            dr["节点名称"] = xmlNode.InnerText;
        //            dt.Rows.Add(dr);
        //        }
        //    }
        //    //this.treeList1.Dispatcher.Invoke(() =>
        //    //    {
        //    //        treeList1.DataSource = dt;
        //    //    }
        //       // );
        //    if (InvokeRequired)
        //    {
        //        this.Invoke(new AsynUpdateUI(delegate()
        //        {
        //            treeList1.DataSource = dt;
        //        }));
        //    }
        //    else {
        //        treeList1.DataSource = dt;
        //    }
        //    //this.treeList1.DataSource = dt;
        //    //this.treeList1.DataSource = SelectXml(filepath);
        //}
        private void addtreelist()
        {
            DataTable dt = new DataTable();
            DataColumn did = new DataColumn("ID", Type.GetType("System.Int32"));
            DataColumn dParentID = new DataColumn("ParentID", Type.GetType("System.Int32"));
            DataColumn dNodeName = new DataColumn("节点名称", Type.GetType("System.String"));
            dt.Columns.Add(did);
            dt.Columns.Add(dParentID);
            dt.Columns.Add(dNodeName);
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.Load(filepath);
            int Id = 1;
            int ParentId = 0;
            //获取根节点
            XmlElement xmlRootElement = xmlDoc.DocumentElement;
            DataRow dr = dt.NewRow();
            dr["ID"] = Id++;
            dr["ParentID"] = 0;
            dr["节点名称"] = xmlRootElement.Attributes["root"].Value;

            dt.Rows.Add(dr);
            XmlNodeList xmlNodeList = xmlRootElement.ChildNodes;
            foreach (XmlElement xmlElement in xmlNodeList)
            {
                dr = dt.NewRow();
                dr["ID"] = Id++;
                dr["ParentID"] = ParentId;
                dr["节点名称"] = xmlElement.Attributes["url"].Value;
                dt.Rows.Add(dr);
                int parentId = Id - 1;
                //遍历该节点下面的子节点
                XmlNodeList ChildNodeList = xmlElement.ChildNodes;
                foreach (XmlNode xmlNode in ChildNodeList)
                {
                    dr = dt.NewRow();
                    dr["ID"] = Id++;
                    dr["ParentID"] = parentId;
                    dr["节点名称"] = xmlNode.InnerText;
                    dt.Rows.Add(dr);
                }
            }
            //this.treeList1.Dispatcher.Invoke(() =>
            //    {
            //        treeList1.DataSource = dt;
            //    }
            // );
            if (InvokeRequired)
            {
                this.Invoke(new AsynUpdateUI(delegate()
                {
                    treeList1.DataSource = dt;
                }));
            }
            else
            {
                treeList1.DataSource = dt;
            }
            //this.treeList1.DataSource = dt;
            //this.treeList1.DataSource = SelectXml(filepath);
        }
        #endregion
        #region 爬取html
        /// <summary>
        /// 爬虫
        /// </summary>
        /// <param name="url"></param>
        /// <returns></returns>
        private string GetHttpWebRequest(string url)
        {
            HttpWebResponse result;
            string strHTML = string.Empty;
            try
            {
                Uri uri = new Uri(url);
                WebRequest webReq = WebRequest.Create(uri);
                WebResponse webRes = webReq.GetResponse();

                HttpWebRequest myReq = (HttpWebRequest)webReq;
                myReq.UserAgent = "User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705";
                myReq.Accept = "*/*";
                myReq.KeepAlive = true;
                myReq.Headers.Add("Accept-Language", "zh-cn,en-us;q=0.5");
                result = (HttpWebResponse)myReq.GetResponse();
                Stream receviceStream = result.GetResponseStream();
                StreamReader readerOfStream = new StreamReader(receviceStream, System.Text.Encoding.GetEncoding("utf-8"));
                strHTML = readerOfStream.ReadToEnd();
                readerOfStream.Close();
                receviceStream.Close();
                result.Close();
            }
            catch
            {
                Uri uri = new Uri(url);
                WebRequest webReq = WebRequest.Create(uri);
                HttpWebRequest myReq = (HttpWebRequest)webReq;
                myReq.UserAgent = "User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.0.3705";
                myReq.Accept = "*/*";
                myReq.KeepAlive = true;
                myReq.Headers.Add("Accept-Language", "zh-cn,en-us;q=0.5");
                //result = (HttpWebResponse)myReq.GetResponse();
                try
                {
                    result = (HttpWebResponse)myReq.GetResponse();
                }
                catch (WebException ex)
                {
                    result = (HttpWebResponse)ex.Response;
                }
                if (result != null)
                {
                    try
                    {
                        Stream receviceStream = result.GetResponseStream();
                        StreamReader readerOfStream = new StreamReader(receviceStream, System.Text.Encoding.GetEncoding("gb2312"));
                        strHTML = readerOfStream.ReadToEnd();
                        readerOfStream.Close();
                        receviceStream.Close();
                        result.Close();
                    }
                    catch (WebException ex)
                    {
                        
                    }
                }
            }
            return strHTML;
        }
        #endregion
        #region 提取HTML代码中的网址
        /// <summary>
        /// 提取HTML代码中的网址
        /// </summary>
        /// <param name="htmlCode"></param>
        /// <param name="url"></param>
        /// <returns></returns>
        private static List<string> GetHyperLinks(string htmlCode, string url)
        {
            ArrayList al = new ArrayList();
            bool IsGenxin = false;
            StringBuilder weburlSB = new StringBuilder();//SQL
            StringBuilder linkSb = new StringBuilder();//展示数据
            List<string> Weburllistzx = new List<string>();//新增
            List<string> Weburllist = new List<string>();//旧的
            string ProductionContent = htmlCode;
            Regex reg = new Regex(@"http(s)?://([\w-]+\.)+[\w-]+/?");
            string wangzhanyuming = reg.Match(url, 0).Value;
            MatchCollection mc = Regex.Matches(ProductionContent.Replace("href=\"/", "href=\"" + wangzhanyuming).Replace("href='/", "href='" + wangzhanyuming).Replace("href=/", "href=" + wangzhanyuming).Replace("href=\"./", "href=\"" + wangzhanyuming), @"<[aA][^>]* href=[^>]*>", RegexOptions.Singleline);
            int Index = 1;
            foreach (Match m in mc)
            {
                MatchCollection mc1 = Regex.Matches(m.Value, @"[a-zA-z]+://[^\s]*", RegexOptions.Singleline);
                if (mc1.Count > 0)
                {
                    foreach (Match m1 in mc1)
                    {
                        string linkurlstr = string.Empty;
                        linkurlstr = m1.Value.Replace("\"", "").Replace("'", "").Replace(">", "").Replace(";", "");
                        weburlSB.Append("$-$");
                        weburlSB.Append(linkurlstr);
                        weburlSB.Append("$_$");
                        if (!Weburllist.Contains(linkurlstr) && !Weburllistzx.Contains(linkurlstr))
                        {
                            IsGenxin = true;
                            Weburllistzx.Add(linkurlstr);
                            linkSb.AppendFormat("{0}<br/>", linkurlstr);
                        }
                    }
                }
                else
                {
                    if (m.Value.IndexOf("javascript") == -1)
                    {
                        string amstr = string.Empty;
                        string wangzhanxiangduilujin = string.Empty;
                        wangzhanxiangduilujin = url.Substring(0, url.LastIndexOf("/") + 1);
                        amstr = m.Value.Replace("href=\"", "href=\"" + wangzhanxiangduilujin).Replace("href='", "href='" + wangzhanxiangduilujin);
                        MatchCollection mc11 = Regex.Matches(amstr, @"[a-zA-z]+://[^\s]*", RegexOptions.Singleline);
                        foreach (Match m1 in mc11)
                        {
                            string linkurlstr = string.Empty;
                            linkurlstr = m1.Value.Replace("\"", "").Replace("'", "").Replace(">", "").Replace(";", "");
                            weburlSB.Append("$-$");
                            weburlSB.Append(linkurlstr);
                            weburlSB.Append("$_$");
                            if (!Weburllist.Contains(linkurlstr) && !Weburllistzx.Contains(linkurlstr))
                            {
                                IsGenxin = true;
                                Weburllistzx.Add(linkurlstr);
                                linkSb.AppendFormat("{0}<br/>", linkurlstr);
                            }
                        }
                    }
                }
                Index++;
            }
            return Weburllistzx;
        }
        #endregion
        #region 把网址写入xml文件
        /// <summary>
        /// // 把网址写入xml文件
        /// </summary>
        /// <param name="strURL"></param>
        /// <param name="alHyperLinks"></param>
        private static void WriteToXml(string strURL, List<string> alHyperLinks)
        {
            string dd = System.Environment.CurrentDirectory;
            dd += "\\www.xml";
            //if (File.Exists(dd))//判断是否存在，是否新建
            //{
            //    xml.Load(dd);
            //    //xml.Load(HttpContext.Current.Server.MapPath(dd));
            //}
            //else {
               
            //}
            FileInfo fi = new FileInfo(dd);//判断文件是否为空
            //if (fi.Length == 0)
            //{
                XmlTextWriter writer = new XmlTextWriter(dd, Encoding.UTF8);
            writer.Formatting = Formatting.Indented;
            writer.WriteStartDocument(false);
            //writer.WriteDocType("HyperLinks", null);
            writer.WriteComment("提取自" + strURL + "的超链接");
            writer.WriteStartElement("root",null);
            writer.WriteAttributeString("root", "URL描述");
            writer.WriteStartElement("url", null);
            writer.WriteAttributeString("url", strURL + DateTime.Now.ToString());
           
            foreach (string str in alHyperLinks)
            {
                string title = GetDomain(str);
                string body = str;
                writer.WriteElementString(title, null, body);
            }
            writer.WriteEndElement();
            //writer.WriteEndElement();
            writer.Flush();
            writer.Close();
            //}
            //else{
            
            //}

          
        }
        #endregion
        #region 获取网址的域名后缀
        /// <summary>
        /// 获取网址的域名后缀
        /// </summary>
        /// <param name="strURL"></param>
        /// <returns></returns>
        private static string GetDomain(string strURL)
        {
            string retVal;
            string strRegex = @"(\.com/|\.net/|\.cn/|\.org/|\.gov/)";
            Regex r = new Regex(strRegex, RegexOptions.IgnoreCase);
            Match m = r.Match(strURL);
            retVal = m.ToString();
            strRegex = @"\.|/$";
            retVal = Regex.Replace(retVal, strRegex, "").ToString();
            if (retVal == "")
                retVal = "other";
            return retVal;
        }
        #endregion
        /// <summary>
        /// 
        /// </summary>
        /// <param name="xmlPath"></param>
        /// <returns></returns>
        private DataTable SelectXml(string xmlPath)
        {
            DataTable dt = new DataTable();
            DataColumn did = new DataColumn("ID", Type.GetType("System.Int32"));
            DataColumn dParentID = new DataColumn("ParentID", Type.GetType("System.Int32"));
            DataColumn dNodeName = new DataColumn("节点名称", Type.GetType("System.String"));
            dt.Columns.Add(did);
            dt.Columns.Add(dParentID);
            dt.Columns.Add(dNodeName);
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.Load(xmlPath);
            //初始ID,ParentID
            Id = 1;
            parentId = 1;
            //获取根节点
            XmlElement xmlRootElement = xmlDoc.DocumentElement;
            DataRow dr = dt.NewRow();
            dr["ID"] = Id;
            dr["ParentID"] = 0;
            dr["节点名称"] = xmlRootElement.Name.ToString();
            dt.Rows.Add(dr);
            Id++;
            int Id1 = Id,pId;
            int b =  parentId, d = Id;              //记录递归后的ID，ParentId变化
            XmlNodeList xmlNodeList = xmlRootElement.ChildNodes;
            foreach (XmlElement xmlElement in xmlNodeList)
            {
                XmlNode xmlnode = (XmlNode)xmlElement;
                dr = dt.NewRow();
                dr["ID"] =d;
                dr["ParentID"] = parentId;
                dr["节点名称"] = xmlnode.Name.ToString();
                dt.Rows.Add(dr); 
                Id1 = d;
                pId = b+1;
                //sort(xmlnode, Id1,pId,dt,ref d,ref b);            //利用ref记录随时变化
            }
            return dt;
        }
        #region 遍历所有url

        private void Getallurl() { 
        List<string> listurl = new List<string>();
           listurl= Geturl();
            foreach(var li in listurl)
            {
                string url1 = GetHttpWebRequest(li);
               
                foreach (var lis in GetHyperLinks(url1,li))
                {
                    listallurl.Add(lis);
                }
            }
            WriteToXml(textEdit1.Text.Trim(), listallurl);
            MessageBox.Show("完成！");
        }
        
        #endregion
        #region 选择字典
        private void barButtonItem10_ItemClick(object sender, ItemClickEventArgs e)
        {
            openFileDialog1.FileName = "";
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
            Common.Playpath = openFileDialog1.FileName;
            barButtonItem10.Caption = Path.GetFileNameWithoutExtension(Playpath);//获得文件名，将文件名显示到加载到button
            }
            
        }
        #endregion
       
        #region 开始扫描
        private void Xssscan(){
            if (Common.playload == null)
            {
                //loadpoc();
            }

            string dd = "";
            if (Playpath==null)
	{
		  dd = System.Environment.CurrentDirectory;
            dd += "\\wordlist.txt";
	}
            else
	{
                dd=Playpath;
	}
            StreamReader sr = new StreamReader(dd, Encoding.Default);
            string slinr = "";
            while (!sr.EndOfStream)
            {
                 slinr = sr.ReadLine();
       
            //string script="<script>alert(document.cookie)</script>";
            string url = "http://localhost:8888/DVWA-master/vulnerabilities/xss_r/?name="+slinr+"#";
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            request.Method = "GET";
            request.ContentType = "text/html;charset=UTF-8";
            request.UserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36";
            request.Headers.Set("Cookie", "security=low; PHPSESSID=s576s2lmiupeapbr0bodof5jj5");
            request.Referer = "http://localhost:8888/DVWA-master/vulnerabilities/xss_r/?name=";
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Stream myResponseStream = response.GetResponseStream();
            StreamReader mystreamreader = new StreamReader(myResponseStream, Encoding.GetEncoding("utf-8"));
            string retstring = mystreamreader.ReadToEnd();
            mystreamreader.Close();
            myResponseStream.Close();
            MatchCollection mc = Regex.Matches(retstring, @"((\<script.*script\>))", RegexOptions.Multiline);
            for (int i = 0; i < mc.Count; i++)
            {
                if (mc[i].Value == slinr)
                    WritePlayLoad(slinr);
            }
            }
        }
#endregion 
        #region 记录playload
        private List<string> WritePlayLoad(string slinr)
        {

            wplayload.Add(slinr);
            return wplayload;
        }
        #endregion

        private void barButtonItem10_ItemClick_1(object sender, ItemClickEventArgs e)
        {
            Loading();
            Task task = new Task(n => Getallurl(), 0);
            task.Start();
            Task tsk = task.ContinueWith(t => addtreelist());
            LoadingCompleted();
        }

        private void radioButton2_CheckedChanged(object sender, EventArgs e)
        {
            Cookieedit.Visible = true;
        }

        private void barButtonItem9_ItemClick(object sender, ItemClickEventArgs e)
        {
            openFileDialog1.FileName = "";
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
               Common.rePlaypath = openFileDialog1.FileName;
               barButtonItem9.Caption = Path.GetFileNameWithoutExtension(rePlaypath);//获得文件名，将文件名显示到加载到button
            }
            
        }
        public static string GetTopDomainName(string domain)
        {
            //https://www.safsd.asdfasdf.baidu.com.cn/ssssd/s/b/d/hhh.html?domain=sfsdf.com.cn&id=1
            domain = domain.Trim().ToLower();
            string rootDomain = ".com.cn|.gov.cn|.cn|.com|.net|.org|.so|.co|.mobi|.tel|.biz|.info|.name|.me|.cc|.tv|.asiz|.hk";
            if (domain.StartsWith("http://")) domain = domain.Replace("http://", "");
            if (domain.StartsWith("https://")) domain = domain.Replace("https://", "");
            if (domain.StartsWith("www.")) domain = domain.Replace("www.", "");
            //safsd.asdfasdf.baidu.com.cn/ssssd/s/b/d/hhh.html?domain=sfsdf.com.cn&id=1
            if (domain.IndexOf("/") > 0)
                domain = domain.Substring(0, domain.IndexOf("/"));
            //safsd.asdfasdf.baidu.com.cn
            foreach (string item in rootDomain.Split('|'))
            {
                if (domain.EndsWith(item))
                {
                    domain = domain.Replace(item, "");
                    if (domain.LastIndexOf(".") > 0)//adfasd.asdfas.cn
                    {
                        domain = domain.Replace(domain.Substring(0, domain.LastIndexOf(".") + 1), "");
                    }
                    return domain + item;
                }
                continue;
            }
            return "";
        }

        private void barButtonItem15_ItemClick(object sender, ItemClickEventArgs e)
        {
            string dd = System.Environment.CurrentDirectory;
            System.Diagnostics.Process.Start(dd + "\\bang助文档.CHM");
        }

        private void barButtonItem7_ItemClick(object sender, ItemClickEventArgs e)
        {
            string dd = System.Environment.CurrentDirectory;
            System.Diagnostics.Process.Start(dd + "\\demo.mp4");
        }

        private void barButtonItem10_ItemClick_2(object sender, ItemClickEventArgs e)
        {
            string dd = System.Environment.CurrentDirectory;
            System.Diagnostics.Process.Start(dd + "\\1.CHM");
        }

        private void barButtonItem16_ItemClick(object sender, ItemClickEventArgs e)
        {
            string dd = System.Environment.CurrentDirectory;
            System.Diagnostics.Process.Start(dd + "\\1.CHM");
        }

        private void barButtonItem4_ItemClick(object sender, ItemClickEventArgs e)
        {
            Author uniqueInstance = Author.Getinstance();
            uniqueInstance.Show();
            uniqueInstance.Focus();
        }
    }
}